
SIGN IN BACK UP CODE=============================================================================================
    sign_in_window = ctk.CTkToplevel(root)  # Create a new top-level window
    sign_in_window.geometry("400x300")
    sign_in_window.title("Sign In")
    sign_in_window.iconbitmap("old-logo.ico")
    

    window_width = 400
    window_height = 300

    screen_width = sign_in_window.winfo_screenwidth()
    screen_height = sign_in_window.winfo_screenheight()

    x = (screen_width // 2) - (window_width // 2)
    y = (screen_height // 2) - (window_height // 2)

    sign_in_window.geometry(f"{window_width}x{window_height}+{x}+{y}")

    # Center the username entry, password entry, and button
    frame = ctk.CTkFrame(sign_in_window, width=400, height=300,  fg_color="transparent")  # Remove bg_color to use default background
    frame.pack(expand=True)  # Expand frame to take all available space
    
    # Center elements vertically in the frame
    frame.grid_rowconfigure((0, 1, 2, 3), weight=1)  # Distribute space vertically in the grid
    frame.grid_columnconfigure(0, weight=1)  # Center elements horizontally

    # Add label inside frame
    # label = ctk.CTkLabel(frame, text="Sign In", font=ctk.CTkFont(size=20, weight="bold"))
    # label.grid(row=0, column=0, pady=5)

    username_entry = ctk.CTkEntry(frame, width=220, placeholder_text='Username')
    username_entry.grid(row=1, column=0, pady=12)

    password_entry = ctk.CTkEntry(frame, width=220, show="*", placeholder_text='Password')
    password_entry.grid(row=2, column=0, pady=12)

    # Create custom button with orange background color
    button = ctk.CTkButton(frame, width=100, text="Sign in", 
                           corner_radius=6, 
                           fg_color='orange', 
                           hover_color="#b99153",
                           command=lambda: sign_in(username_entry.get(), password_entry.get(), sign_in_window))
    button.grid(row=3, column=0, pady=15)

    def on_enter(event):
       button.invoke()  # Simulate button click

    # Bind Enter key to the sign-in window
    sign_in_window.bind('<Return>', on_enter)
    # Make the sign-in window modal
    sign_in_window.transient(root)  # Keep the window on top of the main window
    sign_in_window.grab_set()  # Prevent interaction with other windows



# Function to handle sign-in logic to database---------------------------------------------------------------
def sign_in(username, password, sign_in_window):
    connection = create_connection()  # Create a new connection
    cursor = None  # Initialize cursor to None

    try:
        if connection:  # Check if the connection was successful
            cursor = connection.cursor()

            # Query to check if the username exists
            query = "SELECT * FROM admin WHERE username = %s"
            cursor.execute(query, (username,))
            user = cursor.fetchone()

            # Validate input
            if username == "" and password == "":
                messagebox.showerror("Login Failed", "Username and password are required.")
            elif username == "":
                messagebox.showerror("Login Failed", "Username is required.")
            elif password == "":
                messagebox.showerror("Login Failed", "Password is required.")
            elif user:
                # If username exists, check the password
                if user[1] == password:  # Assuming password is the second field in the fetched user
                    response = messagebox.askyesno("Success", "Log in successfully!")
                    if response:
                        sign_in_window.destroy()  # Close the sign-in window after successful login
                        root.destroy()
                        import admin_dashboard
                else:
                     messagebox.showerror("Login Failed", "Incorrect password.")          
            else:
                messagebox.showerror("Login Failed", "Member does not exist.")
        else:
            messagebox.showerror("Error", "Failed to connect to the database.")
    except Exception as e:
        print(f"Error during sign-in: {e}")
    finally:
        if cursor:
            cursor.close()  # Close the cursor only if it was created
        if connection:
            connection.close()  # Close the connection only if it was created

Log in backup code===========================================================================================
def sign_in(username, password, sign_in_window, root):
    connection = create_connection()  # Create a new connection
    cursor = None  # Initialize cursor to None

    try:
        if connection:  # Check if the connection was successful
            cursor = connection.cursor()

            # Query to check if the username exists
            query = "SELECT * FROM admin WHERE username = %s"
            cursor.execute(query, (username,))
            user = cursor.fetchone()

            # Validate input
            if username == "" and password == "":
                messagebox.showerror("Login Failed", "Username and password are required.")
            elif username == "":
                messagebox.showerror("Login Failed", "Username is required.")
            elif password == "":
                messagebox.showerror("Login Failed", "Password is required.")
            elif user:
                # If username exists, check the password
                if user[1] == password:  # Assuming password is the second field in the fetched user
                    response = messagebox.askyesno("Success", "Log in successfully!")
                    if response:
                        sign_in_window.destroy()
                        root.destroy()
                        import admin_dashboard
                else:
                    messagebox.showerror("Login Failed", "Incorrect password.")
            else:
                messagebox.showerror("Login Failed", "Member does not exist.")
        else:
            messagebox.showerror("Error", "Failed to connect to the database.")
    except Exception as e:
        print(f"Error during sign-in: {e}")
    finally:
        if cursor:
            cursor.close()  # Close the cursor only if it was created
        if connection:
            connection.close()  # Close the connection only if it was created


import customtkinter as ctk
from tkinter import ttk

from admin_tables import queue_table, member_table, password_table

# Initialize the main application window
admin = ctk.CTk()
admin.geometry("800x400")
admin.title("Admin")
admin.iconbitmap("old-logo.ico")

# Set appearance mode and color theme (Light/Dark modes)
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("dark-blue")

# Center the window on the screen
window_width = 800
window_height = 440
screen_width = admin.winfo_screenwidth()
screen_height = admin.winfo_screenheight()
x = (screen_width // 2) - (window_width // 2)
y = (screen_height // 2) - (window_height // 2)
admin.geometry(f"{window_width}x{window_height}+{x}+{y}")

# Create the main frame for content
main_frame = ctk.CTkFrame(admin, width=700, height=300)
main_frame.pack(side="left", expand=True, fill="both")

# Sidebar frame
sidebar_frame = ctk.CTkFrame(main_frame, width=200, height=300, fg_color="transparent")
sidebar_frame.pack(side="left", fill="both", padx="20")

table_label = ctk.CTkLabel(
    sidebar_frame,
    text="Tables",
    font=ctk.CTkFont(),
    text_color="#000000",
    anchor="w"  # Use "w" for west (left)
)
table_label.pack(anchor="w", padx=(8, 0), pady=(10, 0)) 

# Create dropdown menu for selecting members, queue, and passwords
dropdown_var = ctk.StringVar(value="Select Option")
dropdown = ctk.CTkOptionMenu(sidebar_frame, variable=dropdown_var, 
                              values=['Select Option',"Queue",'Students', "Members", "Passwords"], 
                              fg_color="#fff",
                              text_color="#000",
                              dropdown_fg_color="#fff",
                              button_color="orange",
                              dropdown_hover_color="orange",
                              button_hover_color="#de9420",
                              command=lambda choice: update_table(choice))
dropdown.pack(pady=(0, 10))

# Create buttons for adding, deleting, and updating records
add_button = ctk.CTkButton(sidebar_frame, text="Add Record", text_color="#000", fg_color="white", hover_color="#de9420", command=lambda: add_record())
add_button.pack(pady=10)

remove_button = ctk.CTkButton(sidebar_frame, text="Remove Record", text_color="#000", fg_color="white", hover_color="#de9420", command=lambda: remove_record())
remove_button.pack(pady=10)

update_button = ctk.CTkButton(sidebar_frame, text="Update Record", text_color="#000", fg_color="white", hover_color="#de9420", command=lambda: update_record())
update_button.pack(pady=10)

logout_button = ctk.CTkButton(sidebar_frame, text="Log out", text_color="#000", fg_color="lightblue", hover_color="#de9420", command=lambda: log_out())
logout_button.pack(side="bottom", pady='30')

# Table Frame
table_frame = ctk.CTkFrame(main_frame, width=500, height=300, fg_color="transparent")
table_frame.pack(side="right", fill="both", expand=True, pady="20", padx=(0, 20))

# Treeview table widget
table = ttk.Treeview(table_frame)
table.pack(fill="both", expand=True)

# Define columns for members, queue, and passwords tables
def define_member_columns():
    member_table(table)   

def define_queue_columns():
    queue_table(table)

def define_password_columns():
    password_table(table)

# Update table based on selection
def update_table(choice):
    # Clear current table data
    for item in table.get_children():
        table.delete(item)

    # Configure the appropriate columns for the selected table
    if choice == "Members":
        define_member_columns()
        members_data = [(1, "John Doe", "Member Details 1"),
                        (2, "Jane Smith", "Member Details 2")]
        for member in members_data:
            table.insert("", "end", values=member)

    elif choice == "Queue":
        define_queue_columns()
        queue_data = [(1, "Queue 1", "Details 1", "Affiliation 1", 100, "10:30", "No"),
                      (2, "Queue 2", "Details 2", "Affiliation 2", 101, "11:00", "Yes")]
        for queue in queue_data:
            table.insert("", "end", values=queue)

    elif choice == "Passwords":
        define_password_columns()
        passwords_data = [(1, "User1", "Password1"),
                          (2, "User2", "Password2")]
        for password in passwords_data:
            table.insert("", "end", values=password)
    elif choice == "Select Option":
        # Clear current table data
        for item in table.get_children():
            table.delete(item)
         # Clear the headings
        table["columns"] = ()
        table.heading("#0", text="")  # Hide the default column header

def add_record():
    print("Add Record Functionality")

def remove_record():
    print("Remove Record Functionality")

def update_record():
    print("Update Record Functionality")

def log_out():
    print("Log out!")

# Start the main loop
admin.mainloop()



# import customtkinter as ctk
# from tkinter import ttk

# from admin_tables import queue_table, member_table, password_table

# # Initialize the main application window
# admin = ctk.CTk()
# admin.geometry("800x400")
# admin.title("Admin")
# admin.iconbitmap("old-logo.ico")

# # Set appearance mode and color theme (Light/Dark modes)
# ctk.set_appearance_mode("light")
# ctk.set_default_color_theme("dark-blue")

# # Center the window on the screen
# window_width = 800
# window_height = 440
# screen_width = admin.winfo_screenwidth()
# screen_height = admin.winfo_screenheight()
# x = (screen_width // 2) - (window_width // 2)
# y = (screen_height // 2) - (window_height // 2)
# admin.geometry(f"{window_width}x{window_height}+{x}+{y}")

# # Create the main frame for content
# main_frame = ctk.CTkFrame(admin, width=700, height=300)
# main_frame.pack(side="left", expand=True, fill="both")

# # Sidebar frame
# sidebar_frame = ctk.CTkFrame(main_frame, width=200, height=300, fg_color="transparent")
# sidebar_frame.pack(side="left", fill="both", padx="20")

# table_label = ctk.CTkLabel(
#     sidebar_frame,
#     text="Tables",
#     font=ctk.CTkFont(),
#     text_color="#000000",
#     anchor="w"  # Use "w" for west (left)
# )
# table_label.pack(anchor="w", padx=(8, 0), pady=(10, 0)) 

# # Create dropdown menu for selecting members, queue, and passwords
# dropdown_var = ctk.StringVar(value="Select Option")
# dropdown = ctk.CTkOptionMenu(sidebar_frame, variable=dropdown_var, 
#                               values=['Select Option',"Queue",'Students', "Members", "Passwords"], 
#                               fg_color="#fff",
#                               text_color="#000",
#                               dropdown_fg_color="#fff",
#                               button_color="orange",
#                               dropdown_hover_color="orange",
#                               button_hover_color="#de9420",
#                               command=lambda choice: update_table(choice))
# dropdown.pack(pady=(0, 10))

# # Create buttons for adding, deleting, and updating records
# add_button = ctk.CTkButton(sidebar_frame, text="Add Record", text_color="#000", fg_color="white", hover_color="#de9420", command=lambda: add_record())
# add_button.pack(pady=10)

# remove_button = ctk.CTkButton(sidebar_frame, text="Remove Record", text_color="#000", fg_color="white", hover_color="#de9420", command=lambda: remove_record())
# remove_button.pack(pady=10)

# update_button = ctk.CTkButton(sidebar_frame, text="Update Record", text_color="#000", fg_color="white", hover_color="#de9420", command=lambda: update_record())
# update_button.pack(pady=10)

# logout_button = ctk.CTkButton(sidebar_frame, text="Log out", text_color="#000", fg_color="lightblue", hover_color="#de9420", command=lambda: log_out())
# logout_button.pack(side="bottom", pady='30')

# # Table Frame
# table_frame = ctk.CTkFrame(main_frame, width=500, height=300, fg_color="transparent")
# table_frame.pack(side="right", fill="both", expand=True,  padx=(0, 20))

# # Treeview table widget for non-student tables
# table = ttk.Treeview(table_frame)
# table.pack(fill="both", expand=True)

# tab_view = ctk.CTkTabview(table_frame, width=500, height=300, 
#                           segmented_button_selected_hover_color="#fa9a35",
#                           segmented_button_unselected_hover_color="#fa9a35",                    
#                           segmented_button_selected_color='#fa9a35',
#                           anchor="nw")
# tab_view.add("BSCS")  # Add the BSCS tab
# tab_view.add("BS-CRIM")  # Add the CRIM tab
# tab_view.add("BSSW")
# tab_view.add("BSEE")
# tab_view.add("BSMT")
# tab_view.add("BSM")
# tab_view.add("BEED")
# tab_view.add("BSED")
# tab_view.add("BSBA")
# tab_view.add("BSHM")
# tab_view.add("BSA")
# tab_view.add("BAPS")
# # tab_view.add("NURSE")  # Add the NURSE tab
# tab_view.pack_forget()  # Initially hide the tab view

# # Create Treeview tables inside each Tab
# bscs_table = ttk.Treeview(tab_view.tab("BSCS"),  show="headings") 
# def bscs_student():
#     bscs_table['columns'] = ('School ID', 'Full name', 'Course', 'Year&level','Phone')    
#     bscs_table.column("#0", width=0, stretch="no")  # Hide the first column # Lowercase 'n' to match the columns definition
#     bscs_table.column("School ID", anchor="s", width=80)
#     bscs_table.column("Full name", anchor="w", width=80)
#     bscs_table.column("Course", anchor="w", width=80)
#     bscs_table.column("Year&level", anchor="w", width=80)
#     bscs_table.column("Phone", anchor="w", width=80)

#     bscs_table.heading("#0", text="", anchor="center")
#     bscs_table.heading("School ID", text="School ID", anchor="center")
#     bscs_table.heading("Full name", text="Full name")
#     bscs_table.heading("Course", text="Course")
#     bscs_table.heading("Year&level", text="Year&level")
#     bscs_table.heading("Phone", text="Phone")
#     bscs_table.pack(fill="both", expand=True)
# bscs_student()

# crim_table = ttk.Treeview(tab_view.tab("BS-CRIM"),  show="headings") 
# def crim_student():
#     crim_table['columns'] = ('School ID', 'Full name', 'Course', 'Year&level','Phone')    
#     crim_table.column("#0", width=0, stretch="no")  # Hide the first column # Lowercase 'n' to match the columns definition
#     crim_table.column("School ID", anchor="s", width=80)
#     crim_table.column("Full name", anchor="w", width=80)
#     crim_table.column("Course", anchor="w", width=80)
#     crim_table.column("Year&level", anchor="w", width=80)
#     crim_table.column("Phone", anchor="w", width=80)

#     crim_table.heading("#0", text="", anchor="center")
#     crim_table.heading("School ID", text="School ID", anchor="center")
#     crim_table.heading("Full name", text="Full name")
#     crim_table.heading("Course", text="Course")
#     crim_table.heading("Year&level", text="Year&level")
#     crim_table.heading("Phone", text="Phone")
#     crim_table.pack(fill="both", expand=True)
# crim_student()



# # Define columns for members, queue, and passwords tables
# def define_member_columns():
#     member_table(table)   

# def define_queue_columns():
#     queue_table(table)

# def define_password_columns():
#     password_table(table)

# # Update table based on selection
# def update_table(choice):
#     # Clear current table data
#     for item in table.get_children():
#         table.delete(item)
    
#     # Hide the tab view initially
#     tab_view.pack_forget()
#     table.pack(fill="both", expand=True)

#     # Configure the appropriate columns for the selected table
#     if choice == "Members":
#         define_member_columns()
#         members_data = [(1, "John Doe", "Member Details 1"),
#                         (2, "Jane Smith", "Member Details 2")]
#         for member in members_data:
#             table.insert("", "end", values=member)

#     elif choice == "Queue":
#         define_queue_columns()
#         queue_data = [(1, "Queue 1", "Details 1", "Affiliation 1", 100, "10:30", "No"),
#                       (2, "Queue 2", "Details 2", "Affiliation 2", 101, "11:00", "Yes")]
#         for queue in queue_data:
#             table.insert("", "end", values=queue)

#     elif choice == "Passwords":
#         define_password_columns()
#         passwords_data = [(1, "User1", "Password1"),
#                           (2, "User2", "Password2")]
#         for password in passwords_data:
#             table.insert("", "end", values=password)
            
#     elif choice == "Students":
#         # Clear current table data and show the tab view for Students
#         for item in table.get_children():
#             table.delete(item)
#         table.pack_forget()  # Hide the treeview
#         tab_view.pack(fill="both", expand=True,)  # Show the tab view

#         # Add sample data to each tab's table
#         bscs_data = [('21-3434', "Roselyn basan" ,'BSCS', '4rth year','098473834'),
#                      ('21-3434', "Roselyn basan" ,'BSCS', '4rth year','098473834')]
#         for item in bscs_table.get_children():
#             bscs_table.delete(item)
#         for bscs_record in bscs_data:
#             bscs_table.insert("", "end", values=bscs_record)

#         crim_data = [('21-3434', "Roselyn basan" ,'BSCS', '4rth year','098473834'),
#                      ('21-3434', "Roselyn basan" ,'BSCS', '4rth year','098473834')]
#         for item in crim_table.get_children():
#             crim_table.delete(item)
#         for crim_record in crim_data:
#             crim_table.insert("", "end", values=crim_record)

#         # doc_data = [(5, "DOC Record 5"), (6, "DOC Record 6")]
#         # for item in doc_table.get_children():
#         #     doc_table.delete(item)
#         # for doc_record in doc_data:
#         #     doc_table.insert("", "end", values=doc_record)

#     elif choice == "Select Option":
#         # Clear current table data
#         for item in table.get_children():
#             table.delete(item)
#          # Clear the headings
#         table["columns"] = ()
#         table.heading("#0", text="")  # Hide the default column header

# def add_record():
#     print("Add Record Functionality")

# def remove_record():
#     print("Remove Record Functionality")

# def update_record():
#     print("Update Record Functionality")

# def log_out():
#     print("Log out!")

# # Start the main loop
# admin.mainloop()


tab_member = ctk.CTkTabview(table_frame, width=500, height=300, anchor="nw")
tab_member.add("School Staff")  # Add the BSCS tab
tab_member.add("School Faculty")  # Add the CRIM tab
tab_member.pack_forget()  # Initially hide the tab view

# Create Treeview tables inside each Tab
# Create Treeview tables inside each Tab
school_staff = ttk.Treeview(tab_member.tab("School Staff"), show="headings") 
school_staff['columns'] = ('School ID', 'Full name', 'Office', 'Role')    
school_staff.column("#0", width=0, stretch="no")
school_staff.column("School ID", anchor="s", width=80)
school_staff.column("Full name", anchor="w", width=80)
school_staff.column("Office", anchor="w", width=80)
school_staff.column("Role", anchor="w", width=80)

school_staff.heading("#0", text="", anchor="center")
school_staff.heading("School ID", text="School ID", anchor="center")
school_staff.heading("Full name", text="Full name")
school_staff.heading("Office", text="Office")
school_staff.heading("Role", text="Role")
school_staff.pack(fill="both", expand=True, pady=(0, 20))
# Disable column dragging

school_faculty = ttk.Treeview(tab_member.tab("School Faculty"), show="headings") 
school_faculty['columns'] = ('School ID', 'Full name', 'Department', 'Role')    
school_faculty.column("#0", width=0, stretch="no")
school_faculty.column("School ID", anchor="s", width=80)
school_faculty.column("Full name", anchor="w", width=80)
school_faculty.column("Department", anchor="w", width=80)
school_faculty.column("Role", anchor="w", width=80)

school_faculty.heading("#0", text="", anchor="center")
school_faculty.heading("School ID", text="School ID", anchor="center")
school_faculty.heading("Full name", text="Full name")
school_faculty.heading("Department", text="Department")
school_faculty.heading("Role", text="Role")
school_faculty.pack(fill="both", expand=True, pady=(0, 20))


#search function
def search():
    global cancel_clicked

    connection = create_connection()  # Create the database connection
    if connection is None:
        print("Failed to connect to the database.")
        return []

    cursor = connection.cursor()

    search_value = search_bar.get().strip()  # Get the input and remove leading/trailing spaces

    school_id_pattern = r'^\d{2}-\d{4}$'

    if not search_value:  # Check if the search bar is empty
        messagebox.showinfo("Input Error", "Please enter a value to search")  # Show a message if it's empty
        return  # Exit the function if there's no input
            
    elif not re.match(school_id_pattern, search_value):
        messagebox.showerror("Search field", "Error: Invalid school ID format. Please use 'XX-XXXX' format (e.g., '00-0000').")
        return  # Exit the function if validation fails  
    
    search_value = "%" + search_value + "%"  # Add wildcards for the LIKE clause

    if dropdown_var.get() == "Students":        

        # After a search, re-enable the cancel button
        cancel_search.configure(state="normal")
        cancel_clicked = False# Reset flag for future cancel operations
        # Use a parameterized query to prevent SQL injection
        query = "SELECT school_id, full_name, course, year_level FROM student WHERE school_id LIKE %s"
        
        cursor.execute(query, (search_value,))
        results = cursor.fetchall()  # Fetch all matching results

        # Clear existing entries in each table
        for tab_name, table_student in tables.items():
            table_student.delete(*table_student.get_children())  # Clear existing entries

            # Check if results are empty
            if not results:
                messagebox.showinfo("Search Result", "User does not exist")  # Show popup message
            else:
                # Insert the new search results into the current tab's table_student
                for row in results:
                    table_student.insert("", "end", values=row)

    elif dropdown_var.get() == "Members":
                # After a search, re-enable the cancel button
        cancel_search.configure(state="normal")
        cancel_clicked = False# Reset flag for future cancel operations

        # Use a parameterized query to prevent SQL injection
        query = "SELECT school_id, full_name, affiliation, role, office FROM member WHERE school_id LIKE %s"
        
        cursor.execute(query, (search_value,))
        results = cursor.fetchall()  # Fetch all matching results

        # Clear existing entries in each table
        for tab_name, table_member in member_tables.items():
            table_member.delete(*table_member.get_children())  # Clear existing entries

            # Check if results are empty
            if not results:
                messagebox.showinfo("Search Result", "User does not exist")  # Show popup message
            else:
                # Insert the new search results into the current tab's table_member
                for row in results:
                    table_member.insert("", "end", values=row)

    elif dropdown_var.get() == "Operators":

                # After a search, re-enable the cancel button
        cancel_search.configure(state="normal")
        cancel_clicked = False# Reset flag for future cancel operations
        
        connection = create_connection()
        if connection is None:
            print("Failed to connect to the database.")
            return []

        cursor = connection.cursor()

        search_value = search_bar.get().strip()  # Get and strip the search input

        if not search_value:  # Check if the search input is empty
            messagebox.showinfo("Input Error", "Please enter a value to search")
            return

        search_value = "%" + search_value + "%"  # Add wildcards for LIKE clause

        # Execute the search query for Operators
        query = "SELECT school_id, full_name, operate_area, phone_number, username, password FROM operator WHERE school_id LIKE %s"
        
        cursor.execute(query, (search_value,))
        results = cursor.fetchall()  # Fetch all matching results

        # Clear and update the Operator table with search results
        update_operator_table(results)

        # Show a message if no results were found
        if not results:
            messagebox.showinfo("Search Result", "User does not exist")
                    
    search_bar.delete(0, tk.END)  # Clear the search bar after the search is performed

    cursor.close()  # Close the cursor
    connection.close()  # Close the connection 